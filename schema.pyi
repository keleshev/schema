import re
from collections.abc import Callable
from functools import partial
from io import TextIOWrapper
from typing import Any

from _typeshed import Incomplete

class SchemaError(Exception):
    autos: Incomplete
    errors: Incomplete
    def __init__(
        self,
        autos: str | list[str | None] | list[str],
        errors: str | list[str | None] | list[str] | list[None] | None = ...,
    ) -> None: ...
    @property
    def code(self) -> str: ...

class SchemaWrongKeyError(SchemaError): ...
class SchemaMissingKeyError(SchemaError): ...
class SchemaOnlyOneAllowedError(SchemaError): ...
class SchemaForbiddenKeyError(SchemaError): ...
class SchemaUnexpectedTypeError(SchemaError): ...

class And:
    def __init__(self, *args, **kw) -> None: ...
    @property
    def args(self) -> Any: ...
    def validate(
        self, data: Any, **kwargs
    ) -> str | list[int] | list[TextIOWrapper] | int | dict[
        str, str | bool | dict[str, dict[str, str]]
    ]: ...

class Or(And):
    only_one: Incomplete
    match_count: int
    def __init__(self, *args, **kwargs) -> None: ...
    def reset(self) -> None: ...
    def validate(self, data: Any, **kwargs) -> Any: ...

class Regex:
    NAMES: Incomplete
    def __init__(
        self,
        pattern_str: str | re.Pattern | int | None,
        flags: int = ...,
        error: None = ...,
    ) -> None: ...
    @property
    def pattern_str(self) -> str: ...
    def validate(self, data: str | int | None, **kwargs) -> str: ...

class Use:
    def __init__(
        self,
        callable_: type[int] | type[str] | type[float] | Callable | partial,
        error: str | None = ...,
    ) -> None: ...
    def validate(
        self, data: int | list[dict[str, str | int]] | str | float, **kwargs
    ) -> Any: ...

class Schema:
    as_reference: Incomplete
    def __init__(
        self,
        schema: Any,
        error: str | None = ...,
        ignore_extra_keys: bool = ...,
        name: str | None = ...,
        description: str | None = ...,
        as_reference: bool = ...,
    ) -> None: ...
    @property
    def schema(self) -> Any: ...
    @property
    def description(self) -> str | None: ...
    @property
    def name(self) -> str: ...
    @property
    def ignore_extra_keys(self) -> bool: ...
    def is_valid(self, data: dict[str, int], **kwargs) -> bool: ...
    def validate(self, data: Any, **kwargs) -> Any: ...
    def json_schema(
        self, schema_id: str, use_refs: bool = ..., **kwargs
    ) -> dict[str, Any]: ...

class Optional(Schema):
    default: Incomplete
    key: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def reset(self) -> None: ...

class Hook(Schema):
    handler: Incomplete
    key: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class Forbidden(Hook):
    def __init__(self, *args, **kwargs) -> None: ...

class Literal:
    def __init__(self, value: str | Or, description: str | None = ...) -> None: ...
    @property
    def description(self) -> str | None: ...
    @property
    def schema(self) -> str | Or: ...

class Const(Schema):
    def validate(
        self, data: list[dict[str, str | int]], **kwargs
    ) -> list[dict[str, str | int]]: ...
